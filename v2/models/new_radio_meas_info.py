# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.nr_bncs import NrBNCs  # noqa: F401,E501
from swagger_server.models.nr_scs import NrSCs  # noqa: F401,E501
from swagger_server import util


class NewRadioMeasInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nr_bncs: NrBNCs=None, nr_carrier_freq: int=None, nr_scs: NrSCs=None):  # noqa: E501
        """NewRadioMeasInfo - a model defined in Swagger

        :param nr_bncs: The nr_bncs of this NewRadioMeasInfo.  # noqa: E501
        :type nr_bncs: NrBNCs
        :param nr_carrier_freq: The nr_carrier_freq of this NewRadioMeasInfo.  # noqa: E501
        :type nr_carrier_freq: int
        :param nr_scs: The nr_scs of this NewRadioMeasInfo.  # noqa: E501
        :type nr_scs: NrSCs
        """
        self.swagger_types = {
            'nr_bncs': NrBNCs,
            'nr_carrier_freq': int,
            'nr_scs': NrSCs
        }

        self.attribute_map = {
            'nr_bncs': 'nrBNCs',
            'nr_carrier_freq': 'nrCarrierFreq',
            'nr_scs': 'nrSCs'
        }
        self._nr_bncs = nr_bncs
        self._nr_carrier_freq = nr_carrier_freq
        self._nr_scs = nr_scs

    @classmethod
    def from_dict(cls, dikt) -> 'NewRadioMeasInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewRadioMeasInfo of this NewRadioMeasInfo.  # noqa: E501
        :rtype: NewRadioMeasInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nr_bncs(self) -> NrBNCs:
        """Gets the nr_bncs of this NewRadioMeasInfo.


        :return: The nr_bncs of this NewRadioMeasInfo.
        :rtype: NrBNCs
        """
        return self._nr_bncs

    @nr_bncs.setter
    def nr_bncs(self, nr_bncs: NrBNCs):
        """Sets the nr_bncs of this NewRadioMeasInfo.


        :param nr_bncs: The nr_bncs of this NewRadioMeasInfo.
        :type nr_bncs: NrBNCs
        """

        self._nr_bncs = nr_bncs

    @property
    def nr_carrier_freq(self) -> int:
        """Gets the nr_carrier_freq of this NewRadioMeasInfo.

        ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR carrier frequency, as defined in ETSI TS 138.101 [i.15].  # noqa: E501

        :return: The nr_carrier_freq of this NewRadioMeasInfo.
        :rtype: int
        """
        return self._nr_carrier_freq

    @nr_carrier_freq.setter
    def nr_carrier_freq(self, nr_carrier_freq: int):
        """Sets the nr_carrier_freq of this NewRadioMeasInfo.

        ARFCN applicable for a downlink, uplink or bi-directional (TDD) NR carrier frequency, as defined in ETSI TS 138.101 [i.15].  # noqa: E501

        :param nr_carrier_freq: The nr_carrier_freq of this NewRadioMeasInfo.
        :type nr_carrier_freq: int
        """
        if nr_carrier_freq is None:
            raise ValueError("Invalid value for `nr_carrier_freq`, must not be `None`")  # noqa: E501

        self._nr_carrier_freq = nr_carrier_freq

    @property
    def nr_scs(self) -> NrSCs:
        """Gets the nr_scs of this NewRadioMeasInfo.


        :return: The nr_scs of this NewRadioMeasInfo.
        :rtype: NrSCs
        """
        return self._nr_scs

    @nr_scs.setter
    def nr_scs(self, nr_scs: NrSCs):
        """Sets the nr_scs of this NewRadioMeasInfo.


        :param nr_scs: The nr_scs of this NewRadioMeasInfo.
        :type nr_scs: NrSCs
        """
        if nr_scs is None:
            raise ValueError("Invalid value for `nr_scs`, must not be `None`")  # noqa: E501

        self._nr_scs = nr_scs

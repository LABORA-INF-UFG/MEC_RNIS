# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.meas_quantity_results_nr import MeasQuantityResultsNr  # noqa: F401,E501
from swagger_server import util


class ResultsPerSsbIndex(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ssb_index: int=None, ssb_results: MeasQuantityResultsNr=None):  # noqa: E501
        """ResultsPerSsbIndex - a model defined in Swagger

        :param ssb_index: The ssb_index of this ResultsPerSsbIndex.  # noqa: E501
        :type ssb_index: int
        :param ssb_results: The ssb_results of this ResultsPerSsbIndex.  # noqa: E501
        :type ssb_results: MeasQuantityResultsNr
        """
        self.swagger_types = {
            'ssb_index': int,
            'ssb_results': MeasQuantityResultsNr
        }

        self.attribute_map = {
            'ssb_index': 'ssbIndex',
            'ssb_results': 'ssbResults'
        }
        self._ssb_index = ssb_index
        self._ssb_results = ssb_results

    @classmethod
    def from_dict(cls, dikt) -> 'ResultsPerSsbIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResultsPerSsbIndex of this ResultsPerSsbIndex.  # noqa: E501
        :rtype: ResultsPerSsbIndex
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ssb_index(self) -> int:
        """Gets the ssb_index of this ResultsPerSsbIndex.


        :return: The ssb_index of this ResultsPerSsbIndex.
        :rtype: int
        """
        return self._ssb_index

    @ssb_index.setter
    def ssb_index(self, ssb_index: int):
        """Sets the ssb_index of this ResultsPerSsbIndex.


        :param ssb_index: The ssb_index of this ResultsPerSsbIndex.
        :type ssb_index: int
        """
        if ssb_index is None:
            raise ValueError("Invalid value for `ssb_index`, must not be `None`")  # noqa: E501

        self._ssb_index = ssb_index

    @property
    def ssb_results(self) -> MeasQuantityResultsNr:
        """Gets the ssb_results of this ResultsPerSsbIndex.


        :return: The ssb_results of this ResultsPerSsbIndex.
        :rtype: MeasQuantityResultsNr
        """
        return self._ssb_results

    @ssb_results.setter
    def ssb_results(self, ssb_results: MeasQuantityResultsNr):
        """Sets the ssb_results of this ResultsPerSsbIndex.


        :param ssb_results: The ssb_results of this ResultsPerSsbIndex.
        :type ssb_results: MeasQuantityResultsNr
        """

        self._ssb_results = ssb_results

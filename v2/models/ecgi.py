# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from v2.models.base_model_ import Model
from v2.models.plmn import Plmn  # noqa: F401,E501
from v2 import util


class Ecgi(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cell_id: str, plmn: Plmn):  # noqa: E501
        
        self._cell_id = cell_id
        self._plmn = plmn

    # Esta função pega um self e tranforma em dicionário
    # Pega o objeto e retorna ele em formato json
    def json(self):
        return {
            "cell_id": self.cell_id,
            "plmn": self.plmn
        }

    @classmethod
    def from_dict(cls, dikt) -> 'Ecgi':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Ecgi of this Ecgi.  # noqa: E501
        :rtype: Ecgi
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_id(self) -> str:
        """Gets the cell_id of this Ecgi.

        String representing the E-UTRAN Cell Identity. Encoded as a bit string (size (28)) as defined in ETSI TS 136 413 [i.3].  # noqa: E501

        :return: The cell_id of this Ecgi.
        :rtype: str
        """

        return self._cell_id

    @cell_id.setter
    def cell_id(self, cell_id: str):
        """Sets the cell_id of this Ecgi.

        String representing the E-UTRAN Cell Identity. Encoded as a bit string (size (28)) as defined in ETSI TS 136 413 [i.3].  # noqa: E501

        :param cell_id: The cell_id of this Ecgi.
        :type cell_id: str
        """

        # Verifica se não é vazio porem ainda não tem tratamento de erro
        if cell_id == "":
            raise ValueError("Invalid value for `cell_id`, must not be `None`")  # noqa: E501

        self._cell_id = cell_id

    @property
    def plmn(self) -> Plmn:
        """Gets the plmn of this Ecgi.


        :return: The plmn of this Ecgi.
        :rtype: Plmn
        """
        return self._plmn

    @plmn.setter
    def plmn(self, plmn: Plmn):
        """Sets the plmn of this Ecgi.


        :param plmn: The plmn of this Ecgi.
        :type plmn: Plmn
        """
        
        # Verifica se não é vazio porem ainda não tem tratamento de erro
        if plmn == "":
            raise ValueError("Invalid value for `plmn`, must not be `None`")  # noqa: E501

        # Chamo o construtor da classe Plmn passando os parametros mcc e mnc
        new_plmn = Plmn(**plmn)
        
        # Chamo o método json da classe Plmn para transformar os dados em json
        new_plmn = new_plmn.json()

        # Finalmente retorno o Json
        self._plmn = new_plmn

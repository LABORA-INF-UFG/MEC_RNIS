# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from v2.models.base_model_ import Model
from v2 import util


class TempUeId(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, mmec: str, mtmsi: str):  # noqa: E501
        """TempUeId - a model defined in Swagger

        :param mmec: The mmec of this TempUeId.  # noqa: E501
        :type mmec: str
        :param mtmsi: The mtmsi of this TempUeId.  # noqa: E501
        :type mtmsi: str
        """

        self.mmec = mmec
        self.mtmsi = mtmsi

    # Esta função pega um self e tranforma em dicionário
    # Pega o objeto e retorna ele em formato json
    def json(self):
        return {
            'mmec': self.mmec,
            'mtmsi': self.mtmsi
        }

    @classmethod
    def from_dict(cls, dikt) -> 'TempUeId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TempUeId of this TempUeId.  # noqa: E501
        :rtype: TempUeId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mmec(self) -> str:
        """Gets the mmec of this TempUeId.

        MMEC as defined in ETSI TS 136 413 [i.3].  # noqa: E501

        :return: The mmec of this TempUeId.
        :rtype: str
        """
        return self._mmec

    @mmec.setter
    def mmec(self, mmec: str):
        """Sets the mmec of this TempUeId.

        MMEC as defined in ETSI TS 136 413 [i.3].  # noqa: E501

        :param mmec: The mmec of this TempUeId.
        :type mmec: str
        """
        if mmec is None:
            raise ValueError("Invalid value for `mmec`, must not be `None`")  # noqa: E501

        self._mmec = mmec

    @property
    def mtmsi(self) -> str:
        """Gets the mtmsi of this TempUeId.

        M-TMSI as defined in ETSI TS 136 413 [i.3].  # noqa: E501

        :return: The mtmsi of this TempUeId.
        :rtype: str
        """
        return self._mtmsi

    @mtmsi.setter
    def mtmsi(self, mtmsi: str):
        """Sets the mtmsi of this TempUeId.

        M-TMSI as defined in ETSI TS 136 413 [i.3].  # noqa: E501

        :param mtmsi: The mtmsi of this TempUeId.
        :type mtmsi: str
        """
        if mtmsi is None:
            raise ValueError("Invalid value for `mtmsi`, must not be `None`")  # noqa: E501

        self._mtmsi = mtmsi

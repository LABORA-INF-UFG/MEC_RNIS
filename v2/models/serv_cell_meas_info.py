# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.n_cell import NCell  # noqa: F401,E501
from swagger_server.models.nrcgi import Nrcgi  # noqa: F401,E501
from swagger_server.models.s_cell import SCell  # noqa: F401,E501
from swagger_server import util


class ServCellMeasInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, n_cell: NCell=None, nrcgi: Nrcgi=None, s_cell: SCell=None):  # noqa: E501
        """ServCellMeasInfo - a model defined in Swagger

        :param n_cell: The n_cell of this ServCellMeasInfo.  # noqa: E501
        :type n_cell: NCell
        :param nrcgi: The nrcgi of this ServCellMeasInfo.  # noqa: E501
        :type nrcgi: Nrcgi
        :param s_cell: The s_cell of this ServCellMeasInfo.  # noqa: E501
        :type s_cell: SCell
        """
        self.swagger_types = {
            'n_cell': NCell,
            'nrcgi': Nrcgi,
            's_cell': SCell
        }

        self.attribute_map = {
            'n_cell': 'nCell',
            'nrcgi': 'nrcgi',
            's_cell': 'sCell'
        }
        self._n_cell = n_cell
        self._nrcgi = nrcgi
        self._s_cell = s_cell

    @classmethod
    def from_dict(cls, dikt) -> 'ServCellMeasInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServCellMeasInfo of this ServCellMeasInfo.  # noqa: E501
        :rtype: ServCellMeasInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def n_cell(self) -> NCell:
        """Gets the n_cell of this ServCellMeasInfo.


        :return: The n_cell of this ServCellMeasInfo.
        :rtype: NCell
        """
        return self._n_cell

    @n_cell.setter
    def n_cell(self, n_cell: NCell):
        """Sets the n_cell of this ServCellMeasInfo.


        :param n_cell: The n_cell of this ServCellMeasInfo.
        :type n_cell: NCell
        """

        self._n_cell = n_cell

    @property
    def nrcgi(self) -> Nrcgi:
        """Gets the nrcgi of this ServCellMeasInfo.


        :return: The nrcgi of this ServCellMeasInfo.
        :rtype: Nrcgi
        """
        return self._nrcgi

    @nrcgi.setter
    def nrcgi(self, nrcgi: Nrcgi):
        """Sets the nrcgi of this ServCellMeasInfo.


        :param nrcgi: The nrcgi of this ServCellMeasInfo.
        :type nrcgi: Nrcgi
        """
        if nrcgi is None:
            raise ValueError("Invalid value for `nrcgi`, must not be `None`")  # noqa: E501

        self._nrcgi = nrcgi

    @property
    def s_cell(self) -> SCell:
        """Gets the s_cell of this ServCellMeasInfo.


        :return: The s_cell of this ServCellMeasInfo.
        :rtype: SCell
        """
        return self._s_cell

    @s_cell.setter
    def s_cell(self, s_cell: SCell):
        """Sets the s_cell of this ServCellMeasInfo.


        :param s_cell: The s_cell of this ServCellMeasInfo.
        :type s_cell: SCell
        """
        if s_cell is None:
            raise ValueError("Invalid value for `s_cell`, must not be `None`")  # noqa: E501

        self._s_cell = s_cell

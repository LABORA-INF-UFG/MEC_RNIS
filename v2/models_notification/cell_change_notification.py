# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.associate_id import AssociateId  # noqa: F401,E501
from swagger_server.models.ca_reconf_notification_links import CaReconfNotificationLinks  # noqa: F401,E501
from swagger_server.models.ecgi import Ecgi  # noqa: F401,E501
from swagger_server.models.ho_status import HoStatus  # noqa: F401,E501
from swagger_server.models.inline_notification import InlineNotification  # noqa: F401,E501
from swagger_server.models.temp_ue_id import TempUeId  # noqa: F401,E501
from swagger_server.models.time_stamp import TimeStamp  # noqa: F401,E501
from swagger_server import util


class CellChangeNotification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, notification_type: str=None, associate_id: List[AssociateId]=None, ho_status: HoStatus=None, src_ecgi: Ecgi=None, temp_ue_id: TempUeId=None, time_stamp: TimeStamp=None, trg_ecgi: List[Ecgi]=None, links: CaReconfNotificationLinks=None):  # noqa: E501
        """CellChangeNotification - a model defined in Swagger

        :param notification_type: The notification_type of this CellChangeNotification.  # noqa: E501
        :type notification_type: str
        :param associate_id: The associate_id of this CellChangeNotification.  # noqa: E501
        :type associate_id: List[AssociateId]
        :param ho_status: The ho_status of this CellChangeNotification.  # noqa: E501
        :type ho_status: HoStatus
        :param src_ecgi: The src_ecgi of this CellChangeNotification.  # noqa: E501
        :type src_ecgi: Ecgi
        :param temp_ue_id: The temp_ue_id of this CellChangeNotification.  # noqa: E501
        :type temp_ue_id: TempUeId
        :param time_stamp: The time_stamp of this CellChangeNotification.  # noqa: E501
        :type time_stamp: TimeStamp
        :param trg_ecgi: The trg_ecgi of this CellChangeNotification.  # noqa: E501
        :type trg_ecgi: List[Ecgi]
        :param links: The links of this CellChangeNotification.  # noqa: E501
        :type links: CaReconfNotificationLinks
        """
        self.swagger_types = {
            'notification_type': str,
            'associate_id': List[AssociateId],
            'ho_status': HoStatus,
            'src_ecgi': Ecgi,
            'temp_ue_id': TempUeId,
            'time_stamp': TimeStamp,
            'trg_ecgi': List[Ecgi],
            'links': CaReconfNotificationLinks
        }

        self.attribute_map = {
            'notification_type': 'notificationType',
            'associate_id': 'associateId',
            'ho_status': 'hoStatus',
            'src_ecgi': 'srcEcgi',
            'temp_ue_id': 'tempUeId',
            'time_stamp': 'timeStamp',
            'trg_ecgi': 'trgEcgi',
            'links': '_links'
        }
        self._notification_type = notification_type
        self._associate_id = associate_id
        self._ho_status = ho_status
        self._src_ecgi = src_ecgi
        self._temp_ue_id = temp_ue_id
        self._time_stamp = time_stamp
        self._trg_ecgi = trg_ecgi
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'CellChangeNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CellChangeNotification of this CellChangeNotification.  # noqa: E501
        :rtype: CellChangeNotification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_type(self) -> str:
        """Gets the notification_type of this CellChangeNotification.


        :return: The notification_type of this CellChangeNotification.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type: str):
        """Sets the notification_type of this CellChangeNotification.


        :param notification_type: The notification_type of this CellChangeNotification.
        :type notification_type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def associate_id(self) -> List[AssociateId]:
        """Gets the associate_id of this CellChangeNotification.

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :return: The associate_id of this CellChangeNotification.
        :rtype: List[AssociateId]
        """
        return self._associate_id

    @associate_id.setter
    def associate_id(self, associate_id: List[AssociateId]):
        """Sets the associate_id of this CellChangeNotification.

        0 to N identifiers to associate the event for a specific UE or flow.  # noqa: E501

        :param associate_id: The associate_id of this CellChangeNotification.
        :type associate_id: List[AssociateId]
        """

        self._associate_id = associate_id

    @property
    def ho_status(self) -> HoStatus:
        """Gets the ho_status of this CellChangeNotification.


        :return: The ho_status of this CellChangeNotification.
        :rtype: HoStatus
        """
        return self._ho_status

    @ho_status.setter
    def ho_status(self, ho_status: HoStatus):
        """Sets the ho_status of this CellChangeNotification.


        :param ho_status: The ho_status of this CellChangeNotification.
        :type ho_status: HoStatus
        """
        if ho_status is None:
            raise ValueError("Invalid value for `ho_status`, must not be `None`")  # noqa: E501

        self._ho_status = ho_status

    @property
    def src_ecgi(self) -> Ecgi:
        """Gets the src_ecgi of this CellChangeNotification.


        :return: The src_ecgi of this CellChangeNotification.
        :rtype: Ecgi
        """
        return self._src_ecgi

    @src_ecgi.setter
    def src_ecgi(self, src_ecgi: Ecgi):
        """Sets the src_ecgi of this CellChangeNotification.


        :param src_ecgi: The src_ecgi of this CellChangeNotification.
        :type src_ecgi: Ecgi
        """
        if src_ecgi is None:
            raise ValueError("Invalid value for `src_ecgi`, must not be `None`")  # noqa: E501

        self._src_ecgi = src_ecgi

    @property
    def temp_ue_id(self) -> TempUeId:
        """Gets the temp_ue_id of this CellChangeNotification.


        :return: The temp_ue_id of this CellChangeNotification.
        :rtype: TempUeId
        """
        return self._temp_ue_id

    @temp_ue_id.setter
    def temp_ue_id(self, temp_ue_id: TempUeId):
        """Sets the temp_ue_id of this CellChangeNotification.


        :param temp_ue_id: The temp_ue_id of this CellChangeNotification.
        :type temp_ue_id: TempUeId
        """

        self._temp_ue_id = temp_ue_id

    @property
    def time_stamp(self) -> TimeStamp:
        """Gets the time_stamp of this CellChangeNotification.


        :return: The time_stamp of this CellChangeNotification.
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: TimeStamp):
        """Sets the time_stamp of this CellChangeNotification.


        :param time_stamp: The time_stamp of this CellChangeNotification.
        :type time_stamp: TimeStamp
        """

        self._time_stamp = time_stamp

    @property
    def trg_ecgi(self) -> List[Ecgi]:
        """Gets the trg_ecgi of this CellChangeNotification.

        E-UTRAN Cell Global Identifier of the target cell. See note.   # noqa: E501

        :return: The trg_ecgi of this CellChangeNotification.
        :rtype: List[Ecgi]
        """
        return self._trg_ecgi

    @trg_ecgi.setter
    def trg_ecgi(self, trg_ecgi: List[Ecgi]):
        """Sets the trg_ecgi of this CellChangeNotification.

        E-UTRAN Cell Global Identifier of the target cell. See note.   # noqa: E501

        :param trg_ecgi: The trg_ecgi of this CellChangeNotification.
        :type trg_ecgi: List[Ecgi]
        """
        if trg_ecgi is None:
            raise ValueError("Invalid value for `trg_ecgi`, must not be `None`")  # noqa: E501

        self._trg_ecgi = trg_ecgi

    @property
    def links(self) -> CaReconfNotificationLinks:
        """Gets the links of this CellChangeNotification.


        :return: The links of this CellChangeNotification.
        :rtype: CaReconfNotificationLinks
        """
        return self._links

    @links.setter
    def links(self, links: CaReconfNotificationLinks):
        """Sets the links of this CellChangeNotification.


        :param links: The links of this CellChangeNotification.
        :type links: CaReconfNotificationLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links
